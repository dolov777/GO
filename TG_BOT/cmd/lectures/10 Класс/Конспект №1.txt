Дата проведения урока: 
Тема урока: Кодирование текстов


1. Что такое кодирование текста?

•  Определение: Кодирование текста – это процесс преобразования символов текста (букв, цифр, знаков препинания, пробелов и др.) в числовые коды, понятные компьютеру. Компьютер хранит и обрабатывает информацию в виде двоичных чисел (0 и 1), поэтому текст должен быть представлен в виде чисел.
•  Зачем это нужно: Компьютеры не "понимают" буквы непосредственно. Кодирование позволяет им хранить, передавать и обрабатывать текстовую информацию. Без кодирования текст нельзя было бы отобразить на экране, сохранить в файл или отправить по сети.
•  Кодовая таблица (Кодировка): сопоставляет каждому символу уникальный числовой код. Эта таблица определяет, как символы будут представляться в двоичном виде.

2. Основные понятия и кодировки:

•  Бит (bit): Наименьшая единица информации, принимающая значение 0 или 1.
•  Байт (byte): Группа из 8 бит. Часто используется для представления одного символа в кодировке.
•  Символ: Буква, цифра, знак препинания, пробел или другой элемент текста.
•  Кодовая точка (Code Point): Уникальный числовой код, присвоенный символу в кодировке (особенно в Unicode).
•  ASCII (American Standard Code for Information Interchange):
  •  Одна из первых и наиболее простых кодировок.
  •  Использует 7 бит для представления 128 символов.
  •  Включает латинские буквы (A-Z, a-z), цифры (0-9), знаки препинания и управляющие символы (например, символ перевода строки).
  •  Ограничена только английским языком и основными символами.
•  Расширенная ASCII:
  •  Использует 8 бит (1 байт) для представления 256 символов.
  •  Включает символы ASCII и дополнительные символы, специфичные для разных языков (например, символы с диакритическими знаками для французского, немецкого и др.).
  •  Существуют разные варианты расширенной ASCII (например, ISO-8859-1, Windows-1252), которые могут отличаться набором дополнительных символов.
•  Unicode:
  •  Современный стандарт кодирования символов, включающий почти все письменные языки мира.
  •  Назначает уникальный числовой код (кодовую точку) каждому символу.
  •  Поддерживает миллионы символов.
  •  Не является кодировкой сам по себе, а определяет символьный репертуар и кодовые точки.
•  UTF-8 (Unicode Transformation Format - 8-bit):
  •  Наиболее распространенная кодировка Unicode.
  •  Использует переменное количество байтов (от 1 до 4) для представления каждого символа.
  •  ASCII-символы представляются одним байтом, что обеспечивает совместимость с ASCII.
  •  Экономична по памяти для текстов, содержащих в основном латинские символы.
•  UTF-16 (Unicode Transformation Format - 16-bit):
  •  Еще одна кодировка Unicode.
  •  Использует 2 или 4 байта для представления каждого символа.
  •  Может быть более эффективной для языков, где большинство символов занимают 2 байта.
  •  Бывает в вариантах UTF-16BE (Big Endian) и UTF-16LE (Little Endian), указывающих порядок следования байтов.
•  UTF-32 (Unicode Transformation Format - 32-bit):
  •  Использует всегда 4 байта для представления каждого символа.
  •  Проста в реализации, но наименее экономична по памяти.

3. Принципы кодирования:

•  Однозначность: Каждый символ должен иметь только один код в данной кодировке.
•  Универсальность (для Unicode): Кодировка должна поддерживать широкий спектр символов, используемых в разных языках.
•  Экономичность (желательно): Кодировка должна использовать минимальное количество памяти для представления текста (особенно важно для больших объемов данных).
•  Совместимость (желательно): Кодировка должна быть совместима с существующими стандартами и системами.

4. Практические задания и примеры:

•  Перевод текста в двоичный код (ASCII):
  •  Например, закодировать слово в 
"Hello" в ASCII. Нужно найти коды каждой буквы в таблице ASCII и представить их в двоичном виде.
    *  H: 72 (01001000)
    *  e: 101 (01100101)
    *  l: 108 (01101100)
    *  l: 108 (01101100)
    *  o: 111 (01101111)
    *  Итого: 01001000 01100101 01101100 01101100 01101111
•  Расчет объема текста:
  •  Рассчитать, сколько байт потребуется для хранения текста в разных кодировках (ASCII, UTF-8, UTF-16). Например:
    *  Текст: "Привет!"
    ×  ASCII (или расширенная ASCII): 7 символов × 1 байт/символ = 7 байт.
    ×  UTF-8: "П" (2 байта), "р" (1 байт), "и" (2 байта), "в" (2 байта), "е" (1 байт), "т" (1 байт), "!" (1 байт) = 10 байт.
•  Декодирование (преобразование двоичного кода в текст):
  •  Имея двоичный код, зная кодировку, восстановить исходный текст.

5. Проблемы и решения:

•  Несовместимость кодировок: Текст, закодированный в одной кодировке, может неправильно отображаться при открытии в программе, использующей другую кодировку. Решение: использовать универсальную кодировку, такую как UTF-8, и указывать кодировку файла.
•  Потеря информации: при конвертации из кодировки, поддерживающей больше символов, в кодировку, поддерживающую меньше символов, некоторые символы могут быть потеряны или заменены другими (например, при конвертации из UTF-8 в ASCII символы кириллицы будут заменены).
•  Автоматическое определение кодировки: Не всегда возможно точно определить кодировку текста автоматически. Часто требуется указание кодировки пользователем или использование специальных алгоритмов для анализа текста.

6. Значение кодирования текста в информатике:

•  Основа для хранения и обработки текста: Кодирование является фундаментальным понятием для работы с текстовыми данными в компьютерных системах.
•  Важность для веб-разработки: Правильное кодирование текста критически важно для корректного отображения веб-страниц на разных языках и в разных браузерах.
•  Работа с базами данных: Базы данных также используют кодирование для хранения текстовой информации.
•  Обработка естественного языка (NLP): В NLP кодирование текста является важным шагом для анализа и обработки текстовых данных.

7. Дополнительные темы (в зависимости от программы):

•  Нормализация Unicode: Приведение текста к стандартному виду для сравнения строк (например, учет различий между символами с диакритическими знаками, представленными разными кодовыми точками).
•  Регулярные выражения: Использование регулярных выражений для поиска и обработки текста.
•  Шифрование текста: Преобразование текста в зашифрованный вид для обеспечения конфиденциальности.

Подготовка к уроку/экзамену:

•  Повторите определения основных понятий.
•  Выучите названия и характеристики основных кодировок (ASCII, Unicode, UTF-8).
•  Научитесь выполнять простые задания по кодированию и декодированию текста вручную.
•  Понимайте проблемы, связанные с несовместимостью кодировок, и способы их решения.
•  Подумайте, где и как используется кодирование текста в реальной жизни (веб-сайты, текстовые редакторы, базы данных).


_________________________________________________________

Пример кодирования текста: "Привет!"

Рассмотрим, как слово "Привет!" кодируется в разных кодировках:

1. ASCII (и расширенная ASCII, если она включает кириллицу):

•  Ограничение: ASCII не содержит символов кириллицы. Поэтому, если использовать "чистый" ASCII, это слово закодировать невозможно. Расширенная ASCII (например, CP1251 или ISO-8859-5) может содержать кириллицу, но это не стандарт. Предположим, мы можем использовать расширенную ASCII (например, CP1251).

•  Коды (предположительно в CP1251):
  •  П: 207 (CҒ в шестнадцатеричном виде)
  •  р: 188 (BC в шестнадцатеричном виде)
  •  и: 232 (E8 в шестнадцатеричном виде)
  •  в: 162 (A2 в шестнадцатеричном виде)
  •  е: 165 (A5 в шестнадцатеричном виде)
  •  т: 242 (F2 в шестнадцатеричном виде)
  •  !: 33 (21 в шестнадцатеричном виде)

•  Двоичный вид (CP1251):
  •  11001111 10111100 11101000 10100010 10100101 11110010 00100001

•  Размер: 7 символов × 1 байт/символ = 7 байт

2. UTF-8:

•  Коды Unicode:
  •  П: U+041F
  •  р: U+0440
  •  и: U+0438
  •  в: U+0432
  •  е: U+0435
  •  т: U+0442
  •  !: U+0021

•  Кодирование в UTF-8: UTF-8 использует переменное количество байтов для представления символов. Символы кириллицы (U+0400 - U+04FF) кодируются двумя байтами.

  •  П: 208 159 (D0 9F в шестнадцатеричном виде)
  •  р: 209 128 (D1 80 в шестнадцатеричном виде)
  •  и: 208 184 (D0 B8 в шестнадцатеричном виде)
  •  в: 208 178 (D0 B2 в шестнадцатеричном виде)
  •  е: 208 181 (D0 B5 в шестнадцатеричном виде)
  •  т: 209 130 (D1 82 в шестнадцатеричном виде)
  •  !: 33  (21 в шестнадцатеричном виде)

•  Двоичный вид (UTF-8):
  •  11010000 10011111 11010001 10000000 11010000 10111000 11010000 10110010 11010000 10110101 11010001 10000010 00100001

•  Размер: 6 символов кириллицы × 2 байта/символ + 1 символ ASCII × 1 байт/символ = 12 + 1 = 13 байт

3. UTF-16 (Big Endian):

•  Коды Unicode (как и в UTF-8):
  •  П: U+041F
  •  р: U+0440
  •  и: U+0438
  •  в: U+0432
  •  е: U+0435
  •  т: U+0442
  •  !: U+0021

•  Кодирование в UTF-16BE: UTF-16 использует 2 байта (16 бит) для большинства символов. Big Endian означает, что старший байт записывается первым.

  •  П: 04 1F (в шестнадцатеричном виде)
  •  р: 04 40 (в шестнадцатеричном виде)
  •  и: 04 38 (в шестнадцатеричном виде)
  •  в: 04 32 (в шестнадцатеричном виде)
  •  е: 04 35 (в шестнадцатеричном виде)
  •  т: 04 42 (в шестнадцатеричном виде)
  •  !: 00 21 (в шестнадцатеричном виде)

•  Двоичный вид (UTF-16BE):
  •  00000100 00011111 00000100 01000000 00000100 00111000 00000100 00110010 00000100 00110101 00000100 01000010 00000000 00100001

•  Размер: 7 символов × 2 байта/символ = 14 байт

4. UTF-32:

•  Коды Unicode (как и в UTF-8/UTF-16): (См. выше)

•  Кодирование в UTF-32: Все символы занимают 4 байта.

  •  П: 00 00 04 1F
  •  р: 00 00 04 40
  •  и: 00 00 04 38
  •  в: 00 00 04 32
  •  е: 00 00 04 35
  •  т: 00 00 04 42
  •  !: 00 00 00 21

•  Размер: 7 символов × 4 байта/символ = 28 байт

Вывод:

•  ASCII (в чистом виде) не подходит для кодирования кириллицы.
•  UTF-8 наиболее эффективна по памяти для текста на латинице и часто используется для веб-контента. Для кириллицы нужно 2 байта на символ.
•  UTF-16 занимает больше места, чем UTF-8 для данного примера.
•  UTF-32 занимает больше всего места, но обеспечивает простую обработку, т.к. каждый символ представлен фиксированным числом байт.

Важно:

•  Этот пример показывает, как один и тот же текст может быть закодирован по-разному, приводя к разным размерам в памяти.
•  Выбор кодировки зависит от многих факторов, включая язык текста, требования к совместимости, доступные ресурсы и т.д. В большинстве современных случаев рекомендуется использовать UTF-8.
•  Для работы с текстом в разных кодировках используйте соответствующие библиотеки и инструменты, которые позволяют преобразовывать текст из одной кодировки в другую.